#!/bin/bash
###############################################################################
# This hook is to tune the CPLEX software.
#
# PARAMETERS:
# $1 is the candidate configuration number
# $2 is the instance ID
# $3 is the seed
# $4 is the instance name
# The rest ($* after `shift 4') are parameters to the run of CPLEX
#
# RETURN VALUE:
# This hook should print a single numerical value (the value to be minimized)
# or a numerical value + the execution time when using maxBudgetTime
###############################################################################

EXE=/opt/ibm/ILOG/CPLEX_Studio124/cplex/bin/x86-64_sles10_4.1/cplex

#check units for this
#MEMORY_LIMIT=$(( 3072 * 1024 * 1024 ))
MEMORY_LIMIT=900


CANDIDATE=$1
INSTANCEID=$2
SEED=$3
INSTANCE=$4
shift 4 || exit 1
CAND_PARAMS=$*

RUNTIME_LIMIT=10000
PENALTY=$(( $RUNTIME_LIMIT ))

STDOUT="c${CANDIDATE}-${INSTANCEID}.stdout"
STDERR="c${CANDIDATE}-${INSTANCEID}.stderr"
STDPAR="c${CANDIDATE}-${INSTANCEID}.stdpar"

WORK_DIR="c${CANDIDATE}-${RANDOM}"

cat <<EOF > $STDPAR
set logfile *
read $INSTANCE
set clocktype 1
set threads 1
set timelimit $RUNTIME_LIMIT
set mip limits treememory $MEMORY_LIMIT
set workdir $WORK_DIR
set mip tolerances mipgap 0
EOF

i=0
SIMPLEX_PER_S="no"
PERTURB_CONS="1e-6" #default value for option simple perturbation switch no

IFS=" "

for ELEMENT in $CAND_PARAMS; do
    mod=$(( $i % 2 ))
# FIXME: Leslie comments:
# So the code does for every element of the parameters, that should be in the format
# --parameter_name value
# if is the parameter name (so the mod is 0) we change the _ to - because thats how irace need the names.. (maybe there is no reason, the files were using the _ character and i didnt change it there I dont remember why...) :s

# Manuel: we should simply use the correct labels without _ in parameters.txt
    if [ "$mod" -eq "0" ]; then
      PNAME=${ELEMENT//'_'/' '}

# FIXME: Leslie: The "mip strategy bbinterval" is something i just copy from the wrapper of smac, they do this with this parameter for the cat instances... dont really know why.. thet say:
# #== Deal with bbinterval: only allow 1+
# and in the parameter files the values for that parameter start from 2, so this never happens. It says that 0 is infinity... :P i dont know is infinity is possible for this param...
# anyway decided to add it also in the hook run just in case... so i handled it the same way as them...
# MANUEL: This can never happen, the value zero is not in parameters.txt
    elif [ "$PNAME" == "mip strategy bbinterval" ]; then
        if [ "$ELEMENT" -eq "0" ]; then
            ELEMENT=1000
        fi
# FIXME: Leslie: the other thing is to assemble the parameters  "simplex perturbation switch" and "perturbation constant" they need to go together, so down in the code i must be putting them in the parameters file (STDPAR). 
# Manuel: we can say:
# simple_perturbation_switch "simplex perturbation " c (no, yes)
# simple_perturbation_constant_yes " " c (...) | simple_perturbation_switch == "yes"
# simple_perturbation_constant_no " " c (1e-6) | simple_perturbation_switch == "no"
    elif [ "$PNAME" == "simplex perturbation switch" ]; then
        SIMPLEX_PER_S=$ELEMENT
    elif [ "$PNAME" == "perturbation constant" ]; then
        PERTURB_CONS=$ELEMENT
    else
        echo "set $PNAME $ELEMENT" >> $STDPAR
    fi

    i=$(( $i + 1))
done

cat <<EOF >> $STDPAR
set simplex perturbation ${SIMPLEX_PER_S} ${PERTURB_CONS}
display settings all
opt
quit
EOF

#echo "./target-runner ${INSTANCE} ${CANDIDATE} ${RUNTIME_LIMIT} ${CAND_PARAMS}" >> "check.txt"

$EXE < ${STDPAR} 1> ${STDOUT} 2> ${STDERR}

# In case of error, we print the current time:
error() {
    echo "`TZ=UTC date`: error: $@" >&2
    exit 1
}

# The output of the candidate $CANDIDATE should be written in the file 
if [ ! -s "${STDOUT}" ]; then
    # In this case, the file does not exist. Let's exit with a value 
    # different from 0. In this case irace will stop with an error.
    error "${STDOUT}: No such file or directory"
fi

SOLVED="CRASHED"

# FIXME: This could use case and avoid read STDOUT so many times.
TMP=$(cat ${STDOUT} | grep "Error termination")
if [ "$TMP" != "" ]; then
    SOLVED="TIMEOUT"
fi

TMP=$(cat ${STDOUT} | grep "MIP - Time limit exceeded")
if [ "$TMP" != "" ]; then
    SOLVED="TIMEOUT"
fi

TMP=$(cat ${STDOUT} | grep "MIP - Aborted")
if [ "$TMP" != "" ]; then
    SOLVED="TIMEOUT"
fi

TMP=$(cat ${STDOUT} | grep "MIP - Memory limit exceeded")
if [ "$TMP" != "" ]; then
    SOLVED="TIMEOUT"
fi

TMP=$(cat ${STDOUT} | grep "runsolver_max_cpu_time_exceeded")
if [ "$TMP" != "" ] ; then
    SOLVED="TIMEOUT"
fi

TMP=$(cat ${STDOUT} | grep "runsolver_max_memory_limit_exceeded")
if [ "$TMP" != "" ] ; then
    SOLVED="TIMEOUT"
fi

TMP=$(cat ${STDOUT} | grep "MIP - Integer optimal")
if [ "$TMP" != "" ] ; then
    SOLVED="SOLVED"
fi

TMP=$(cat ${STDOUT} | grep "MIP - Optimal")
if [ "$TMP" != "" ] ; then
    SOLVED="SOLVED"
fi

if [ "$SOLVED" == "TIMEOUT" ]; then
    COST=$RUNTIME_LIMIT
elif [ "$SOLVED" == "CRASHED" ]; then
    COST=$PENALTY
else
    # runtime objective
    COST=$(cat ${STDOUT} | grep "Solution time" | gawk -F " " '{print $4}')
    if ! [[ "$COST" =~ ^[-+0-9.e]+$ ]] ; then
        error "${STDOUT}: Output is not a number"
    fi
fi

echo "$COST $COST"

#echo "SCOST: $COST ECOST ./target-runner ${INSTANCE} ${CANDIDATE} ${CAND_PARAMS}" >> "check.txt"

# We are done with our duty. Clean files and exit with 0 (no error).
rm -rf "$WORK_DIR" "${STDOUT}" "${STDERR}" "${STDPAR}"
exit 0
